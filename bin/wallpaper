#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python3.withPackages (pkgs: with pkgs; [ pillow ])"

import PIL.ExifTags
import PIL.Image
import argparse
import os
import random
import re
import subprocess
import pathlib
import sys
import time
import sqlite3
from typing import Iterable

for tag, name in PIL.ExifTags.TAGS.items():
    if name == 'Orientation':
        EXIF_ORIENTATION_TAG = tag

def is_viable_wallpaper(path):
    _, ext = os.path.splitext(path)
    if not ext.lower() in ['.jpg', '.png']:
        return False

    with PIL.Image.open(path) as image:
        exif = image._getexif()
        rotated = False
        if exif and EXIF_ORIENTATION_TAG in exif:
            orientation = exif[EXIF_ORIENTATION_TAG]
            if orientation in [3, 8]:
                rotated = True

        if rotated:
            return image.height > image.width
        else:
            return image.width > image.height

def find_viable_wallpapers(dir: str) -> Iterable[str]:
    for entry in os.scandir(dir):
        if entry.is_file() and is_viable_wallpaper(entry.path):
            yield entry.name

def feh_set_wallpaper(path):
    '''Call feh to set the wallpaper'''
    subprocess.call(['feh', '--bg-fill', path])

def gnome_set_wallpaper(path):
    uri = pathlib.Path(path).as_uri()
    subprocess.call([
        'gsettings', 'set', 'org.gnome.desktop.background',
        'picture-uri', uri
    ])

def xfce4_set_wallpaper(path):
    '''Set the wallpaper in XFCE4'''
    print('Setting wallpaper to: {}'.format(path), file=sys.stderr)

    # Just set it for all lines that match this regex.
    r = re.compile('^/backdrop/screen0/.*/workspace0/last-image$')
    p = subprocess.run(
        ['xfconf-query', '--channel', 'xfce4-desktop', '--list'],
        capture_output=True
    )
    for line in p.stdout.decode().splitlines():
        if r.match(line):
            subprocess.run([
                'xfconf-query',
                '--channel', 'xfce4-desktop',
                '--property', line,
                '--set', path
            ])

def set_wallpaper(path):
    desktop = None
    if 'XDG_SESSION_DESKTOP' in os.environ:
        desktop = os.environ['XDG_SESSION_DESKTOP']

    if desktop == 'xfce':
        xfce4_set_wallpaper(path)
    elif desktop == 'gnome':
        gnome_set_wallpaper(path)
    else:
        feh_set_wallpaper(path)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Set random wallpapers')
    parser.add_argument('-i', '--interval', type=int, default=300,
            help='Time interval in seconds')
    parser.add_argument('directories', metavar='DIR', type=str, nargs='*',
            help='Directories to add to the database.')
    args = parser.parse_args()

    wallpapers_file = os.path.expanduser('~/.wallpapers')
    wallpapers_path = os.path.expanduser('~/.wallpapers.db')

    conn = sqlite3.connect(wallpapers_path)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS wallpapers (
            dir TEXT NOT NULL,
            name TEXT NOT NULL,
            PRIMARY KEY (dir, name)
        )
    ''')
    conn.commit()

    if len(args.directories) > 0:
        for dir in args.directories:
            dir = os.path.realpath(dir)
            c.execute('DELETE FROM wallpapers WHERE dir = ?', [dir])
            values = [(dir, name) for name in find_viable_wallpapers(dir)]
            c.executemany(
                'INSERT INTO wallpapers (dir, name) VALUES (?, ?)',
                values)
            print(f'{dir}: Inserted {len(values)} wallpapers', file=sys.stderr)
            conn.commit()
    else:
        while True:
            randoms = c.execute(
                'SELECT dir, name FROM wallpapers ORDER BY RANDOM() LIMIT 1')
            for dir, name in randoms:
                print(f'Setting wallpaper to {dir}/{name}...', file=sys.stderr)
                set_wallpaper(os.path.join(dir, name))
                time.sleep(args.interval)
