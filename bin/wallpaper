#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python3.withPackages (pkgs: with pkgs; [ pillow ])"

import PIL.ExifTags  # type: ignore
import PIL.Image  # type: ignore
import argparse
import os
import random
import re
import subprocess
import pathlib
import sys
import time
import sqlite3
from typing import Iterable, Tuple


for tag, name in PIL.ExifTags.TAGS.items():
    if name == "Orientation":
        EXIF_ORIENTATION_TAG = tag


def is_viable_wallpaper(path: str) -> bool:
    _, ext = os.path.splitext(path)
    if not ext.lower() in [".jpg", ".png"]:
        return False

    with PIL.Image.open(path) as image:
        exif = image._getexif()
        rotated = False
        if exif and EXIF_ORIENTATION_TAG in exif:
            orientation = exif[EXIF_ORIENTATION_TAG]
            if orientation in [3, 8]:
                rotated = True

        if rotated:
            return image.height > image.width
        else:
            return image.width > image.height


def find_viable_wallpapers(dir: str) -> Iterable[str]:
    for entry in os.scandir(dir):
        if entry.is_file() and is_viable_wallpaper(entry.path):
            yield entry.name


def feh_set_wallpaper(path: str) -> None:
    """Call feh to set the wallpaper"""
    subprocess.call(["feh", "--bg-fill", path])


def gnome_set_wallpaper(path: str) -> None:
    uri = pathlib.Path(path).as_uri()
    subprocess.call(
        ["gsettings", "set", "org.gnome.desktop.background", "picture-uri", uri]
    )


def xfce4_set_wallpaper(path: str) -> None:
    """Set the wallpaper in XFCE4"""
    print("Setting wallpaper to: {}".format(path), file=sys.stderr)

    # Just set it for all lines that match this regex.
    r = re.compile("^/backdrop/screen0/.*/workspace0/last-image$")
    p = subprocess.run(
        ["xfconf-query", "--channel", "xfce4-desktop", "--list"], capture_output=True
    )
    for line in p.stdout.decode().splitlines():
        if r.match(line):
            subprocess.run(
                [
                    "xfconf-query",
                    "--channel",
                    "xfce4-desktop",
                    "--property",
                    line,
                    "--set",
                    path,
                ]
            )


def set_wallpaper(path: str) -> None:
    desktop = None
    if "XDG_SESSION_DESKTOP" in os.environ:
        desktop = os.environ["XDG_SESSION_DESKTOP"]

    if desktop == "xfce":
        xfce4_set_wallpaper(path)
    elif desktop == "gnome":
        gnome_set_wallpaper(path)
    else:
        feh_set_wallpaper(path)


class Database:
    def __init__(self, path):
        self._conn = sqlite3.connect(path)
        c = self._conn.cursor()
        c.execute("PRAGMA foreign_keys = ON")
        c.execute(
            "CREATE TABLE IF NOT EXISTS directories (path TEXT NOT NULL PRIMARY KEY)"
        )
        c.execute(
            """CREATE TABLE IF NOT EXISTS wallpapers (
                directory TEXT NOT NULL,
                name TEXT NOT NULL,
                PRIMARY KEY(directory, name),
                FOREIGN KEY(directory) REFERENCES directories(path)
            )"""
        )
        c.execute(
            """CREATE TABLE IF NOT EXISTS current_wallpaper (
                directory TEXT NOT NULL,
                name TEXT NOT NULL,
                FOREIGN KEY(directory) REFERENCES directories(path)
            )"""
        )
        self._conn.commit()

    def add_directory(self, dir: str) -> int:
        dir = os.path.realpath(dir)
        c = self._conn.cursor()
        c.execute("DELETE FROM wallpapers WHERE directory = ?", (dir,))
        c.execute("DELETE FROM current_wallpaper WHERE directory = ?", (dir,))
        c.execute("DELETE FROM directories WHERE path = ?", (dir,))
        self._conn.commit()
        names = list(find_viable_wallpapers(dir))
        if names:
            c.execute("INSERT INTO directories (path) VALUES (?)", (dir,))
            c.executemany(
                "INSERT INTO wallpapers (directory, name) VALUES (?, ?)",
                [(dir, name) for name in names],
            )
            self._conn.commit()
        return len(names)

    def current(self) -> str:
        c = self._conn.cursor()
        current = c.execute(
            "SELECT directory, name FROM current_wallpaper LIMIT 1"
        ).fetchone()
        if current is None:
            raise Exception("no wallpaper set")
        else:
            (dir, name) = current
            return os.path.join(dir, name)

    def random_current(self) -> str:
        c = self._conn.cursor()
        random = c.execute(
            "SELECT directory, name FROM wallpapers ORDER BY RANDOM() LIMIT 1"
        ).fetchone()
        if random is None:
            raise Exception("no wallpapers present")
        else:
            (dir, name) = random
            c.execute("DELETE FROM current_wallpaper")
            c.execute(
                "INSERT INTO current_wallpaper (directory, name) VALUES (?, ?)",
                (dir, name),
            )
            self._conn.commit()
            return os.path.join(dir, name)

    def refresh(self) -> Iterable[Tuple[str, int]]:
        c = self._conn.cursor()
        for (dir,) in c.execute("SELECT path FROM directories").fetchall():
            num_added = self.add_directory(dir)
            yield dir, num_added


def main() -> None:
    parser = argparse.ArgumentParser(description="Set random wallpapers")
    parser.add_argument(
        "-i", "--interval", type=int, default=300, help="Time interval in seconds"
    )
    parser.add_argument(
        "-r",
        "--refresh",
        type=bool,
        default=False,
        const=True,
        nargs="?",
        help="Rescan directories",
    )
    parser.add_argument(
        "-c",
        "--current",
        type=bool,
        default=False,
        const=True,
        nargs="?",
        help="Print current wallpaper and exit",
    )
    parser.add_argument(
        "directories",
        metavar="DIR",
        type=str,
        nargs="*",
        help="Directories to add to the database",
    )
    args = parser.parse_args()

    db = Database(os.path.expanduser("~/.wallpapers.db"))

    if args.current:
        print(db.current())
        return

    if len(args.directories) > 0:
        for dir in args.directories:
            num = db.add_directory(dir)
            print(f"{dir}: Inserted {num} wallpapers", file=sys.stderr)

    if args.refresh:
        total = 0
        for dir, num in db.refresh():
            print(f"{dir}: Inserted {num} wallpapers", file=sys.stderr)
            total += num
        print(f"Inserted {total} wallpapers in total", file=sys.stderr)
        return

    if len(args.directories) == 0:
        while True:
            path = db.random_current()
            print(f"Setting wallpaper to {path}...", file=sys.stderr)
            set_wallpaper(path)
            time.sleep(args.interval)


if __name__ == "__main__":
    main()
